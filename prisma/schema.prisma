generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String
  passwordHash  String
  role          Role           @default(STAFF)
  isSuperAdmin  Boolean        @default(false)
  phone         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  store         Store          @relation(fields: [storeId], references: [id])
  storeId       String
  shiftRequests ShiftRequest[]
  shifts        Shift[]
  attendance    Attendance[]
  notificationPreferences NotificationPreference[]
  notifications Notification[] @relation("UserNotifications")
  sentNotifications Notification[] @relation("SentByUser")
  auditLogs     AuditLog[] @relation("UserAuditLogs")

  @@index([storeId])
  @@index([isSuperAdmin])
}

model Store {
  id             String   @id @default(cuid())
  name           String
  address        String
  phone          String
  businessHours  Json
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // リレーション
  users          User[]
  shifts         Shift[]
  shiftRequests  ShiftRequest[]
  settings       StoreSettings?
  notifications  Notification[]    @relation("StoreNotifications")
  auditLogs      AuditLog[]        @relation("StoreAuditLogs")
}

model ShiftRequest {
  id        String           @id @default(uuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  store     Store            @relation(fields: [storeId], references: [id])
  storeId   String
  startTime DateTime
  endTime   DateTime
  status    ShiftRequestStatus @default(PENDING)
  note      String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  shift     Shift?

  @@index([userId])
  @@index([storeId])
  @@index([startTime, endTime])
  @@index([status])
}

model Shift {
  id             String        @id @default(uuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  store          Store         @relation(fields: [storeId], references: [id])
  storeId        String
  startTime      DateTime
  endTime        DateTime
  shiftRequest   ShiftRequest? @relation(fields: [shiftRequestId], references: [id])
  shiftRequestId String?       @unique
  status         ShiftStatus   @default(SCHEDULED)
  note           String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  attendance     Attendance?

  @@index([userId])
  @@index([storeId])
  @@index([startTime, endTime])
  @@index([status])
}

model Attendance {
  id             String          @id @default(uuid())
  user           User            @relation(fields: [userId], references: [id])
  userId         String
  shift          Shift           @relation(fields: [shiftId], references: [id])
  shiftId        String          @unique
  clockInTime    DateTime?
  clockOutTime   DateTime?
  status         AttendanceStatus @default(ON_TIME)
  workingMinutes Int?
  note           String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([userId])
  @@index([clockInTime])
}

model StoreSettings {
  id                   String   @id @default(uuid())
  store                Store    @relation(fields: [storeId], references: [id])
  storeId              String   @unique
  businessHours        Json     // 曜日ごとの営業時間設定
  minShiftHours        Int      @default(2)  // 最小シフト時間（時間単位）
  maxShiftHours        Int      @default(8)  // 最大シフト時間（時間単位）
  minBreakMinutes      Int      @default(30) // 最小休憩時間（分単位）
  maxWeeklyWorkHours   Int      @default(40) // 週間最大勤務時間
  emailNotifications   Boolean  @default(true)
  pushNotifications    Boolean  @default(false)
  timezone             String   @default("Asia/Tokyo")
  language             String   @default("ja")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([storeId])
}

enum Role {
  ADMIN
  STAFF
}

enum ShiftRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ShiftStatus {
  SCHEDULED
  CANCELED
}

enum AttendanceStatus {
  ON_TIME
  LATE
  ABSENT
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  relatedId String?
  link      String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  senderId  String?
  storeId   String?

  // リレーション
  user      User             @relation("UserNotifications", fields: [userId], references: [id])
  sender    User?            @relation("SentByUser", fields: [senderId], references: [id])
  store     Store?           @relation("StoreNotifications", fields: [storeId], references: [id])

  @@index([userId])
  @@index([senderId])
  @@index([storeId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
}

model NotificationPreference {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String  // 通知タイプ
  email     Boolean  @default(true)
  push      Boolean  @default(false)
  inApp     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, type])
  @@index([userId])
}

enum NotificationType {
  SHIFT_CONFIRMED
  SHIFT_CHANGED
  REQUEST_APPROVED
  REQUEST_REJECTED
  SHIFT_REMINDER
  SYSTEM_NOTIFICATION
  ADMIN_MESSAGE
}

model AuditLog {
  id        String   @id @default(cuid())
  actionType String
  userId    String
  targetId  String?
  details   String?
  ipAddress String?
  userAgent String?
  storeId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  user      User     @relation("UserAuditLogs", fields: [userId], references: [id])
  store     Store?   @relation("StoreAuditLogs", fields: [storeId], references: [id])

  @@index([userId])
  @@index([storeId])
  @@index([actionType])
  @@index([createdAt])
} 